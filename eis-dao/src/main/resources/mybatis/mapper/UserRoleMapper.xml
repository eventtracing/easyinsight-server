<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.netease.hz.bdms.easyinsight.dao.rbac.UserRoleMapper">

    <resultMap id="BaseResultMap" type="com.netease.hz.bdms.easyinsight.dao.model.rbac.UserRole">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="role_id" jdbcType="BIGINT" property="roleId"/>
        <result column="role_type" jdbcType="INTEGER" property="roleType"/>
        <result column="type_id" jdbcType="BIGINT" property="typeId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, user_id, role_id, role_type, type_id, create_time, update_time
    </sql>

    <sql id="table_name">eis_user_role</sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="table_name"/>
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectByUserIdAndRoleId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="table_name"/>
        where user_id = #{userId} and role_id = #{roleId}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from
        <include refid="table_name"/>
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" keyColumn="id" keyProperty="id" useGeneratedKeys="true"
            parameterType="com.netease.hz.bdms.easyinsight.dao.model.rbac.UserRole">
        insert into
        <include refid="table_name"/>
        (user_id, role_id, role_type, type_id, create_time, update_time )
        values (#{userId,jdbcType=BIGINT}, #{roleId,jdbcType=BIGINT}, #{roleType,jdbcType=INTEGER},
        #{typeId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
        )
    </insert>

    <insert id="insertSelective" keyColumn="id" keyProperty="id" useGeneratedKeys="true"
            parameterType="com.netease.hz.bdms.easyinsight.dao.model.rbac.UserRole">
        insert into
        <include refid="table_name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="roleType != null">
                role_type,
            </if>
            <if test="typeId != null">
                type_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=BIGINT},
            </if>
            <if test="roleType != null">
                #{roleType,jdbcType=INTEGER},
            </if>
            <if test="typeId != null">
                #{typeId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.netease.hz.bdms.easyinsight.dao.model.rbac.UserRole">
        update
        <include refid="table_name"/>
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=BIGINT},
            </if>
            <if test="roleType != null">
                role_type = #{roleType,jdbcType=INTEGER},
            </if>
            <if test="typeId != null">
                type_id = #{typeId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.netease.hz.bdms.easyinsight.dao.model.rbac.UserRole">
        update
        <include refid="table_name"/>
        set user_id = #{userId,jdbcType=BIGINT},
        role_id = #{roleId,jdbcType=BIGINT},
        role_type = #{roleType,jdbcType=INTEGER},
        type_id = #{typeId,jdbcType=BIGINT},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <insert id="insertBatch" parameterType="com.netease.hz.bdms.easyinsight.dao.model.rbac.UserRole"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert ignore into
        <include refid="table_name"/>
        (user_id, role_id, role_type, type_id)
        values
        <foreach collection="userRoleListToInsert" item="userRole" separator=",">
            (
            #{userRole.userId},
            #{userRole.roleId},
            #{userRole.roleType},
            #{userRole.typeId}
            )
        </foreach>
    </insert>

    <delete id="deleteBatch">
        DELETE FROM
        <include refid="table_name"/>
        <where>
            <if test="existedRelationList != null and existedRelationList.size() > 0">
                (user_id, role_id, role_type, type_id) IN
                <foreach collection="existedRelationList" item="userRole" open="(" separator="," close=")">
                    (
                    #{userRole.userId},
                    #{userRole.roleId},
                    #{userRole.roleType},
                    #{userRole.typeId}
                    )
                </foreach>
            </if>
        </where>
    </delete>

    <select id="selectRelationBetweenUserAndRoleInTargetRange" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="table_name"/>
        <where>
            <if test="ranges != null and ranges.size() > 0">
                (user_id, role_type, type_id) IN
                <foreach collection="ranges" item="userRole" open="(" separator="," close=")">
                    (
                    #{userRole.userId},
                    #{userRole.roleType},
                    #{userRole.typeId}
                    )
                </foreach>
            </if>
        </where>
    </select>

    <select id="selectRelationBetweenUserAndRole" resultMap="BaseResultMap">
        SELECT
        ur.id,
        ur.role_id,
        ur.user_id,
        ur.role_type,
        ur.type_id,
        ur.create_time,
        ur.update_time,
        r.role_name AS roleName,
        r.role_level AS roleLevel,
        u.email AS email,
        u.user_name AS userName
        FROM eis_role r
        INNER JOIN
        <include refid="table_name"/>
        ur
        ON r.id = ur.role_id

        LEFT JOIN eis_user u
        ON ur.user_id = u.id

        <where>

            <if test="roleId !=null">
                r.id = #{roleId}
            </if>

            <if test="roleType !=null">
                AND ur.role_type = #{roleType}
            </if>

            <if test="typeIdList != null and typeIdList.size() > 0">
                AND ur.type_id IN
                <foreach collection="typeIdList" item="typeId" open="(" separator="," close=")">
                    #{typeId}
                </foreach>
            </if>

            <if test="userIdList != null and userIdList.size() > 0">
                AND ur.user_id IN
                <foreach collection="userIdList" item="userId" open="(" separator="," close=")">
                    #{userId}
                </foreach>
            </if>

            <if test="roleLevel !=null">
                AND r.role_level = #{roleLevel}
            </if>

        </where>

    </select>

    <delete id="deleteRelationBatchBetweenUserAndRole">
        DELETE FROM
        <include refid="table_name"/>
        <where>
            <if test="roleType !=null">
                AND role_type = #{roleType}
            </if>

            <if test="typeIdList != null and typeIdList.size() > 0">
                AND type_id IN
                <foreach collection="typeIdList" item="typeId" open="(" separator="," close=")">
                    #{typeId}
                </foreach>
            </if>

            <if test="userIdList != null and userIdList.size() > 0">
                AND user_id IN
                <foreach collection="userIdList" item="userId" open="(" separator="," close=")">
                    #{userId}
                </foreach>
            </if>

            <if test="roleId != null">
                AND role_id = #{roleId}
            </if>

        </where>

    </delete>

    <select id="selectCount" resultType="java.lang.Integer">
        SELECT
        COUNT(*)
        FROM
        <include refid="table_name"/>
        <where>
            <if test="roleType !=null">
                AND role_type = #{roleType}
            </if>
            <if test="typeId !=null">
                AND type_id = #{typeId}
            </if>
        </where>
    </select>

</mapper>